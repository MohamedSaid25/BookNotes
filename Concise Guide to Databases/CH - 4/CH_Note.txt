

                                            [Relational Database]


 - Projection -
     defines conditions on the data you want to retrieve, for example people
     with an age greater than 18


 - Normalisation 
    The primary aim of normalisation is to remove data redundancy, specifically repeating data in a single record. 
    This reduced storage space and increased performance
    as duplicated data was kept to a minimum and only used to connect tables together


    First Normal Form (1NF)

        - remove repeating groups and create a new table to store these attributes. 
          Include a link to the table you have removed it from in the form of the key item. 
          This will be the foreign key. 
          The main reason for removing repeating groups is to make sure you don’t end up with variable length records.


        - There may be more than one unique identifier—in this case you have candidate
          keys and you need to choose the most appropriate one. Sometimes it is a combination of attributes

         
        

    Second Normal Form (2NF)

        Remove data that is only dependent on part of primary key (if there is no compound key, it is probably already in 2NF) 
        and create a new table. 
        What you want is for every |_non-key_| attribute to be dependent on the whole key


    
    Third Normal Form (3NF)

       - Remove any data that is dependent on a non-key field and create a new table. 
         This happens when there is more than one candidate key and it would be unique. 
         Create a new table with this as the primary key. 
         What you are trying to do here is separate two entities which have become combined.

       - To achieve third normal form you also remove calculated field  
         There are occasions where you might want to store data that can be calculated because of the overhead of doing the
        calculation is higher than that of storing the calculated value.



 - Constrains

    Primary Key constraint : This is basically identifying the primary key. It means values must be unique and they must not be blank (null)
    
    Foreign Key constraint : Identifies the table the foreign key references
    
    Not Null constraint    : The entity must contain data, in other words it cannot be blank
    
    Unique constraint      : but that does not mean it is a primary key. You don’t have to use this constraint on the primary key 
                             because that and NOT NULL are part of the primary key constraint.
    
    Check constraints      : These give rules as to what is valid data. They include mathematical constraints 
                             where data must be in a specific range and alphanumeric conditions where data must 
                             come from a specified list or contain (or not contain)
       

    



    - Joins - 
        
        Retrieving data from one table is seldom enough. For example we might want to retrieve 
        the invoice date and order date of a customer. Unless the customers id number
        is know, this would require retrieving data from two tables. This is known as a table join. 
        There are a number of types of joins:

        NOTE**** => in query syntax words 'outer - inner' is optinal type join / (right - left ) join

        [Inner Join (Also known as a simple join) ==  Equijoin] 

            returns those rows that satisfy the join condition

                SELECT customer_name, invoice_id, invoice_date
                FROM customer
                INNER JOIN invoice
                ON customer.customer_id = invoice.customer_id;

            This syntax would retrieve those customers who have invoices. Any customers
            without an invoice would not be shown. Note that ‘INNER’ is an optional statement
            and does not need to be included.
            In Oracle an Equijoin and an Inner Join are equivalent.

    
        [ Outer Join ]
            
            Extends the idea of an inner join by including some or all records
            from the other table in the join which do not meet the join condition.
            There are three types of outer joins:
            null بس لا هنا هات كله والزباله حطه  match  هناك بجيب ال  

            - Left Outer Join - 
                
                This will return all records from the table on the ‘left’ (literally
                to the left of the LEFT clause) which have no matching records in the table on the
                right. A null will be displayed instead


            - Right Outer Join - 
                
                This will return all records from the table on the ‘right’ (literally
                to the left of the RIGHT clause) which have no matching records in the table on
                the right. A null will be displayed instead

        
        [Self Join]

            A self-join is when a table is joined with itself based on a common column. 
            It allows you to combine rows from the same table, treating it as two separate entities. 
            Self-joins are commonly used when you need to compare records within the same table, 
            such as finding hierarchical relationships or identifying matching patterns. However, 
            the importance of self-joins depends on the specific requirements of your data and the queries you need to perform.


            Let's say we have a table called "Employees" with the following columns: EmployeeID, Name, and ManagerID. 
            The ManagerID column contains the ID of the employee's manager.
            To find the names of employees and their corresponding managers, you can use a self-join on the Employees table:
            
            SELECT e.Name AS EmployeeName, m.Name AS ManagerName
            FROM Employees e
            JOIN Employees m ON e.ManagerID = m.EmployeeID;

            This query joins the Employees table with itself based on the ManagerID and EmployeeID columns. 
            It retrieves the names of employees (e.Name) and their corresponding managers (m.Name).By using a self-join, 
            you can establish relationships between employees and their managers within the same table. 
            This can be useful for organizational hierarchies or when you need to analyze relationships between different records in a single table.


        [ Full Outer Join ] 

            This will return all records from both the ‘left’ and the ‘right’
            tables whether there is a matching record in the other table or not. The syntax uses
            FULL JOIN. Like the LEFT and RIGHT joins, any unmatched record will have
            nulls displayed 


        [Cartesian Join] 
            
            A final type of join is the. In this case every record in one table
            is matched with every record in the joined table. So if you had two tables each of
            10 records, you would end up with 100 records returned. This is obviously an error
            and usually happens where matching join records are not specified. About the only
            time this is likely to happen is if an equijoin is being used and the WHERE clause
            linking the associated primary and foreign keys is left out